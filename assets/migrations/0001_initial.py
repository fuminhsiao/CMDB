# Generated by Django 4.0.5 on 2022-06-29 12:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_type', models.CharField(choices=[('server', 'Server'), ('networkdevice', 'Network Device'), ('storagedevice', 'Storage Device'), ('securitydevice', 'Security Device'), ('software', 'Software')], default='server', max_length=64, verbose_name='Asset Type')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Asset Name')),
                ('sn', models.CharField(max_length=128, unique=True, verbose_name='Asset Serial Number')),
                ('status', models.SmallIntegerField(choices=[(0, 'online'), (1, 'offline'), (2, 'unknown'), (3, 'out of order'), (4, 'backup')], default=0, verbose_name='Asset Status')),
                ('manage_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Management')),
                ('purchase_day', models.DateField(blank=True, null=True, verbose_name='Purchase Day')),
                ('expire_day', models.DateField(blank=True, null=True, verbose_name='Expire Day')),
                ('price', models.FloatField(blank=True, null=True, verbose_name='Price')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='Memo')),
                ('c_time', models.DateTimeField(auto_now_add=True, verbose_name='Approved Date')),
                ('m_time', models.DateTimeField(auto_now=True, verbose_name='Updated Date')),
                ('admin', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin', to=settings.AUTH_USER_MODEL, verbose_name='Asset Administrator')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_by', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
            ],
            options={
                'verbose_name': 'Assets Sheet',
                'verbose_name_plural': 'Assets Sheets',
                'ordering': ['-c_time'],
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(max_length=128, unique=True, verbose_name='Contract SN')),
                ('name', models.CharField(max_length=64, verbose_name='Contract Name')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='Memo')),
                ('price', models.IntegerField(verbose_name='Contract Price')),
                ('detail', models.TextField(blank=True, null=True, verbose_name='Contract Details')),
                ('start_day', models.DateField(blank=True, null=True, verbose_name='Start Day')),
                ('end_day', models.DateField(blank=True, null=True, verbose_name='End Day')),
                ('license_num', models.IntegerField(blank=True, null=True, verbose_name='Licence Number')),
                ('c_day', models.DateField(auto_now_add=True, verbose_name='Create Date')),
                ('m_day', models.DateField(auto_now=True, verbose_name='Modify Date')),
            ],
            options={
                'verbose_name': 'Contract',
                'verbose_name_plural': 'Contracts',
            },
        ),
        migrations.CreateModel(
            name='IDC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='IDC Name')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='Memo')),
            ],
            options={
                'verbose_name': 'IDC',
                'verbose_name_plural': 'IDCs',
            },
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Manufacturer Name')),
                ('telephone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Support Phone Number')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='Memo')),
            ],
            options={
                'verbose_name': 'Manufacturer',
                'verbose_name_plural': 'Manufacturers',
            },
        ),
        migrations.CreateModel(
            name='NewAssetApprovalZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(max_length=128, unique=True, verbose_name='Asset SN')),
                ('asset_type', models.CharField(blank=True, choices=[('server', 'Server'), ('networkdevice', 'Network Device'), ('storagedevice', 'Storage Device'), ('securitydevice', 'Security Device'), ('software', 'Software')], default='server', max_length=64, null=True, verbose_name='Asset Type')),
                ('manufacturer', models.CharField(blank=True, max_length=64, null=True, verbose_name='Asset Manufacturer')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='Asset Model')),
                ('ram_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='RAM Size')),
                ('cpu_model', models.CharField(blank=True, max_length=128, null=True, verbose_name='CPU Model')),
                ('cpu_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='CPU Count')),
                ('cpu_core_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='CPU Core Count')),
                ('os_distribution', models.CharField(blank=True, max_length=64, null=True, verbose_name='OS Distribution')),
                ('os_type', models.CharField(blank=True, max_length=64, null=True, verbose_name='OS type')),
                ('os_release', models.CharField(blank=True, max_length=64, null=True, verbose_name='OS version')),
                ('data', models.TextField(verbose_name='Asset Data')),
                ('c_time', models.DateTimeField(auto_now_add=True, verbose_name='Asset create time')),
                ('m_time', models.DateTimeField(auto_now=True, verbose_name='Asset Modify time')),
                ('apprived', models.BooleanField(default=False, verbose_name='Approval Status')),
            ],
            options={
                'verbose_name': 'New Asset Approval',
                'verbose_name_plural': 'New Asset Approval',
                'ordering': ['-c_time'],
            },
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_asset_type', models.SmallIntegerField(choices=[(0, 'OS'), (1, 'Office/Develop Software'), (2, 'Business Software')], default=0, verbose_name='Software Type')),
                ('license_num', models.IntegerField(default=1, verbose_name='authorized license')),
                ('version', models.CharField(help_text='Example: RedHat release 7 (Final)', max_length=64, unique=True, verbose_name='Software version')),
            ],
            options={
                'verbose_name': 'Software',
                'verbose_name_plural': 'Software',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='Tag Name')),
                ('c_day', models.DateField(auto_now_add=True, verbose_name='Create Date')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='StorageDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_asset_type', models.SmallIntegerField(choices=[(0, 'Raid'), (1, 'NAS'), (2, 'Tape Library'), (3, 'Tape Drive')], default=0, verbose_name='Storage Device Type')),
                ('model', models.CharField(default='unknown', max_length=128, verbose_name='Storage Device Model')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='assets.asset')),
            ],
            options={
                'verbose_name': 'Storage Device',
                'verbose_name_plural': 'Storage Devices',
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_asset_type', models.SmallIntegerField(choices=[(0, 'PC Server'), (1, 'Blade Server'), (2, 'Mini Server')], default=0, verbose_name='Server Type')),
                ('created_by', models.CharField(choices=[('auto', 'Auto Add'), ('manual', 'Manual Add')], default='auto', max_length=32, verbose_name='Add Method')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='Server Model')),
                ('raid_type', models.CharField(blank=True, max_length=512, null=True, verbose_name='Raid Type')),
                ('os_type', models.CharField(blank=True, max_length=64, null=True, verbose_name='OS Type')),
                ('os_distribution', models.CharField(blank=True, max_length=64, null=True, verbose_name='OS Distribution')),
                ('os_release', models.CharField(blank=True, max_length=64, null=True, verbose_name='OS version')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='assets.asset')),
                ('hosted_on', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hosted_on_server', to='assets.server', verbose_name='Host on Server')),
            ],
            options={
                'verbose_name': 'Server',
                'verbose_name_plural': 'Servers',
            },
        ),
        migrations.CreateModel(
            name='SecurityDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_asset_type', models.SmallIntegerField(choices=[(0, 'Firewall'), (1, 'Attack detection device'), (2, 'Internet Gateway'), (3, 'Cloud Bastion Host')], default=0, verbose_name='Security Device Type')),
                ('model', models.CharField(default='unknown', max_length=128, verbose_name='Security Device Model')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='assets.asset')),
            ],
            options={
                'verbose_name': 'Security Device',
                'verbose_name_plural': 'Security Devices',
            },
        ),
        migrations.CreateModel(
            name='NetworkDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_asset_type', models.SmallIntegerField(choices=[(0, 'Router'), (1, 'Switch'), (2, 'Load Balancing'), (3, 'VPN Device')], default=0, verbose_name='Network Device Type')),
                ('model', models.CharField(default='unknown', max_length=128, verbose_name='Network Device Model')),
                ('vlan_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='VLanIP')),
                ('intranet_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Intranet IP')),
                ('firmware', models.CharField(blank=True, max_length=128, null=True, verbose_name='Firmware Version')),
                ('port_num', models.SmallIntegerField(blank=True, null=True, verbose_name='Port Number')),
                ('device_detail', models.TextField(blank=True, null=True, verbose_name='Device Detail')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='assets.asset')),
            ],
            options={
                'verbose_name': 'Network Device',
                'verbose_name_plural': 'Network Devices',
            },
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Event Log')),
                ('event_type', models.SmallIntegerField(choices=[(0, 'others'), (1, 'hardware change'), (2, 'add accessories'), (3, 'asset offline')], default=0, verbose_name='Event Type')),
                ('component', models.CharField(blank=True, max_length=256, null=True, verbose_name='Event Component')),
                ('detail', models.TextField(verbose_name='Event Details')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Event Time')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='Memo')),
                ('asset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assets.asset')),
                ('new_asset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assets.newassetapprovalzone')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Event Executor')),
            ],
            options={
                'verbose_name': 'Event Log',
                'verbose_name_plural': 'Event Log',
            },
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpu_model', models.CharField(blank=True, max_length=128, null=True, verbose_name='CPU Model')),
                ('cpu_count', models.PositiveSmallIntegerField(default=1, verbose_name='CPU Number')),
                ('cpu_core_count', models.PositiveSmallIntegerField(default=1, verbose_name='CPU Core Number')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='assets.asset')),
            ],
            options={
                'verbose_name': 'CPU',
                'verbose_name_plural': 'CPUs',
            },
        ),
        migrations.CreateModel(
            name='BusinessUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Business Name')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='Memo')),
                ('parent_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parent_level', to='assets.businessunit')),
            ],
            options={
                'verbose_name': 'Business Line',
                'verbose_name_plural': 'Business Lines',
            },
        ),
        migrations.AddField(
            model_name='asset',
            name='business_unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assets.businessunit', verbose_name='Business Unit'),
        ),
        migrations.AddField(
            model_name='asset',
            name='contract',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assets.contract', verbose_name='Contract'),
        ),
        migrations.AddField(
            model_name='asset',
            name='idc',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assets.idc', verbose_name='IDC'),
        ),
        migrations.AddField(
            model_name='asset',
            name='manufacturer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assets.manufacturer', verbose_name='Manufacturer'),
        ),
        migrations.AddField(
            model_name='asset',
            name='tags',
            field=models.ManyToManyField(blank=True, to='assets.tag', verbose_name='Tag'),
        ),
        migrations.CreateModel(
            name='RAM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(blank=True, max_length=128, null=True, verbose_name='RAM SN')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='RAM Model')),
                ('manufacturer', models.CharField(blank=True, max_length=128, null=True, verbose_name='RAM Manufacturer')),
                ('slot', models.CharField(max_length=64, verbose_name='Slot')),
                ('capacity', models.IntegerField(blank=True, null=True, verbose_name='RAM Capacity(GB)')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.asset')),
            ],
            options={
                'verbose_name': 'RAM',
                'verbose_name_plural': 'RAM',
                'unique_together': {('asset', 'slot')},
            },
        ),
        migrations.CreateModel(
            name='NIC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, null=True, verbose_name='NIC Name')),
                ('model', models.CharField(max_length=128, verbose_name='NIC Model')),
                ('mac', models.CharField(max_length=64, verbose_name='MAC Address')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('net_mask', models.CharField(blank=True, max_length=64, null=True, verbose_name='Net Mask')),
                ('bonding', models.CharField(blank=True, max_length=64, null=True, verbose_name='Bonding')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.asset')),
            ],
            options={
                'verbose_name': 'NIC',
                'verbose_name_plural': 'NIC',
                'unique_together': {('asset', 'model', 'mac')},
            },
        ),
        migrations.CreateModel(
            name='Disk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(max_length=128, verbose_name='Disk SN')),
                ('slot', models.CharField(blank=True, max_length=128, null=True, verbose_name='Disk Slot')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='Disk Model')),
                ('manufacturer', models.CharField(blank=True, max_length=128, null=True, verbose_name='Disk Manufaturer')),
                ('capacity', models.FloatField(blank=True, null=True, verbose_name='Disk Capacity(GB)')),
                ('interface_type', models.CharField(choices=[('SATA', 'SATA'), ('SAS', 'SAS'), ('SCSI', 'SCSI'), ('SSD', 'SSD'), ('unknown', 'unknown')], default='unknown', max_length=16, verbose_name='Interface Type')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.asset')),
            ],
            options={
                'verbose_name': 'Disk',
                'verbose_name_plural': 'Disk',
                'unique_together': {('asset', 'sn')},
            },
        ),
    ]
